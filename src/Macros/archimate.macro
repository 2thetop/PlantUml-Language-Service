' modified from https://raw.githubusercontent.com/ebbypeter/Archimate-PlantUML/master/Archimate.puml'

'------------------------------------------------------------'
' Sprites
'------------------------------------------------------------'

sprite $access jar:archimate/access
sprite $aggregation jar:archimate/aggregation
sprite $association jar:archimate/association
sprite $assignment jar:archimate/assignment
sprite $realisation jar:archimate/realisation
sprite $usedby jar:archimate/used-by
sprite $flow jar:archimate/flow
sprite $trigger jar:archimate/triggering
sprite $composition jar:archimate/composition
sprite $influence jar:archimate/influence

'------------------------------------------------------------'
' Styling
'------------------------------------------------------------'
!define TECHN_FONT_SIZE 12
!define ELEMENT_FONT_COLOR #FFFFFF

skinparam defaultTextAlignment center
skinparam wrapWidth 400
skinparam maxMessageSize 150

skinparam Arrow {
    Color #000000
    FontColor #000000
    FontSize 12
}
skinparam Folder<<grouping>> {
    Shadowing true
    StereotypeFontSize 0
    FontColor #444444
    BorderColor #444444
    BorderStyle dashed
}

skinparam Folder<<group>> {
    Shadowing true
    FontColor #444444
    BackgroundColor lightgrey
}

skinparam rectangle<<boundary>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor #444444
    BorderColor #444444
    BorderStyle dashed
}

skinparam rectangle {
    DiagonalCorner<<outcome>> 10
    RoundCorner<<action>> 30
    RoundCorner<<capability>> 30
	BorderStyle<<capability>> dashed
}

'------------------------------------------------------------'
' Layout
'------------------------------------------------------------'
!definelong LAYOUT_AS_SKETCH
    skinparam backgroundColor #EEEBDC
    skinparam handwritten true
    skinparam defaultFontName "Comic Sans MS"
    center footer <font color=red>Warning:</font> Created for discussion, needs to be validated
!enddefinelong

!define LAYOUT_TOP_DOWN top to bottom direction
!define LAYOUT_LEFT_RIGHT left to right direction

' Layout Helpers
!define Lay_D(e_from, e_to) e_from -[hidden]D- e_to
!define Lay_U(e_from, e_to) e_from -[hidden]U- e_to
!define Lay_R(e_from, e_to) e_from -[hidden]R- e_to
!define Lay_L(e_from, e_to) e_from -[hidden]L- e_to

' Boundaries
!define Boundary(e_alias, e_label) rectangle "==e_label" <<boundary>> as e_alias
!define Boundary(e_alias, e_label, e_type) rectangle "==e_label\n<size:TECHN_FONT_SIZE>[e_type]</size>" <<boundary>> as e_alias

'------------------------------------------------------------'
' Elements'
'------------------------------------------------------------'

'Strategy Elements
!define Strategy_Resource(e_alias, e_label) archimate #STRATEGY "e_label" <<strategy-resource>> as e_alias
!define Strategy_Capability(e_alias, e_label) archimate #STRATEGY "e_label" <<strategy-capability>> as e_alias
!define Strategy_CourseOfAction(e_alias, e_label) archimate #STRATEGY "e_label" <<strategy-course-of-action>> as e_alias

'Business Elements
!define Business_Actor(e_alias, e_label) archimate #BUSINESS "e_label" <<business-actor>> as e_alias
!define Business_Role(e_alias, e_label) archimate #BUSINESS "e_label" <<business-role>> as e_alias
!define Business_Collaboration(e_alias, e_label) archimate #BUSINESS "e_label" <<business-collaboration>> as e_alias
!define Business_Interface(e_alias, e_label) archimate #BUSINESS "e_label" <<business-interface>> as e_alias
!define Business_Process(e_alias, e_label) archimate #BUSINESS "e_label" <<business-process>> as e_alias
!define Business_Function(e_alias, e_label) archimate #BUSINESS "e_label" <<business-function>> as e_alias
!define Business_Interaction(e_alias, e_label) archimate #BUSINESS "e_label" <<business-interaction>> as e_alias
!define Business_Event(e_alias, e_label) archimate #BUSINESS "e_label" <<business-event>> as e_alias
!define Business_Service(e_alias, e_label) archimate #BUSINESS "e_label" <<business-service>> as e_alias
!define Business_Object(e_alias, e_label) archimate #BUSINESS "e_label" <<business-object>> as e_alias
!define Business_Contract(e_alias, e_label) archimate #BUSINESS "e_label" <<business-contract>> as e_alias
!define Business_Representation(e_alias, e_label) archimate #BUSINESS "e_label" <<business-representation>> as e_alias
!define Business_Product(e_alias, e_label) archimate #BUSINESS "e_label" <<business-product>> as e_alias

'Application Elements
!define Application_Component(e_alias, e_label) archimate #APPLICATION "e_label" <<application-component>> as e_alias
!define Application_Collaboration(e_alias, e_label) archimate #APPLICATION "e_label" <<application-collaboration>> as e_alias
!define Application_Interface(e_alias, e_label) archimate #APPLICATION "e_label" <<application-interface>> as e_alias
!define Application_Function(e_alias, e_label) archimate #APPLICATION "e_label" <<application-function>> as e_alias
!define Application_Interaction(e_alias, e_label) archimate #APPLICATION "e_label" <<application-interaction>> as e_alias
!define Application_Process(e_alias, e_label) archimate #APPLICATION "e_label" <<application-process>> as e_alias
!define Application_Event(e_alias, e_label) archimate #APPLICATION "e_label" <<application-event>> as e_alias
!define Application_Service(e_alias, e_label) archimate #APPLICATION "e_label" <<application-service>> as e_alias
!define Application_DataObject(e_alias, e_label) archimate #APPLICATION "e_label" <<application-data-object>> as e_alias

'Technology Elements
!define Technology_Node(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-node>> as e_alias
!define Technology_Device(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-device>> as e_alias
!define Technology_SystemSoftware(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-system-software>> as e_alias
!define Technology_Collaboration(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<collaboration>> as e_alias
!define Technology_Interface(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-infra-interface>> as e_alias
!define Technology_Path(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-communication-path>> as e_alias
!define Technology_CommunicationNetwork(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-network>> as e_alias
!define Technology_Function(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-function>> as e_alias
!define Technology_Process(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-process>> as e_alias
!define Technology_Interaction(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<interaction>> as e_alias
!define Technology_Event(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<event>> as e_alias
!define Technology_Service(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-infra-service>> as e_alias
!define Technology_Artifact(e_alias, e_label) archimate #TECHNOLOGY "e_label" <<technology-artifact>> as e_alias

'Physical Elements
!define Physical_Equipment(e_alias, e_label) archimate #PHYSICAL "e_label" <<physical-equipment>> as e_alias
!define Physical_Facility(e_alias, e_label) archimate #PHYSICAL "e_label" <<physical-facility>> as e_alias
!define Physical_DistributionNetwork(e_alias, e_label) archimate #PHYSICAL "e_label" <<physical-distribution-network>> as e_alias
!define Physical_Material(e_alias, e_label) archimate #PHYSICAL "e_label" <<physical-material>> as e_alias

'Motivation Elements
!define Motivation_Stakeholder(e_alias, e_label) archimate #MOTIVATION "e_label" <<stakeholder-filled>> as e_alias
!define Motivation_Driver(e_alias, e_label) archimate #MOTIVATION "e_label" <<driver>> as e_alias
!define Motivation_Assessment(e_alias, e_label) archimate #MOTIVATION "e_label" <<assessment>> as e_alias
!define Motivation_Goal(e_alias, e_label) archimate #MOTIVATION "e_label" <<goal>> as e_alias
!define Motivation_Outcome(e_alias, e_label) archimate #MOTIVATION "e_label" <<motivation-outcome>> as e_alias
!define Motivation_Principle(e_alias, e_label) archimate #MOTIVATION "e_label" <<principle>> as e_alias
!define Motivation_Requirement(e_alias, e_label) archimate #MOTIVATION "e_label" <<requirement>> as e_alias
!define Motivation_Constraint(e_alias, e_label) archimate #MOTIVATION "e_label" <<constraint>> as e_alias
!define Motivation_Meaning(e_alias, e_label) archimate #MOTIVATION "e_label" <<meaning>> as e_alias
!define Motivation_Value(e_alias, e_label) archimate #MOTIVATION "e_label" <<value>> as e_alias

'Implementation Elements
!define Implementation_WorkPackage(e_alias, e_label) archimate #IMPLEMENTATION "e_label" <<workpackage-filled>> as e_alias
!define Implementation_Deliverable(e_alias, e_label) archimate #IMPLEMENTATION "e_label" <<deliverable-filled>> as e_alias
!define Implementation_Event(e_alias, e_label) archimate #IMPLEMENTATION "e_label" <<event>> as e_alias
!define Implementation_Plateau(e_alias, e_label) archimate #IMPLEMENTATION "e_label" <<plateau>> as e_alias
!define Implementation_Gap(e_alias, e_label) archimate #IMPLEMENTATION "e_label" <<gap-filled>> as e_alias

'Other Elements
!define Other_Location(e_alias, e_label) archimate #OrangeRed "e_label" <<location>> as e_alias
!define Junction_Or(e_alias, e_label) circle #black "e_label" as e_alias
!define Junction_And(e_alias, e_label) circle #whitesmoke "e_label" as e_alias
!define Grouping(e_alias, e_label) Folder "e_label" <<grouping>> as e_alias
!define Group(e_alias, e_label) Folder "e_label" <<group>> as e_alias

!define Outcome(e_alias, e_label) rectangle #Motivation "e_label" <<outcome>> as e_alias
!define Action(e_alias, e_label) rectangle #Strategy "e_label" <<action>> as e_alias
!define Capability(e_alias, e_label) rectangle #OrangeRed "e_label" <<capability>> as e_alias

'------------------------------------------------------------'
' Relationships
'------------------------------------------------------------'
!define Rel_(e_sourceAlias, e_targetAlias, e_label, e_direction="") e_sourceAlias e_direction e_targetAlias : "e_label"

!define Composition(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-*")  
!define Composition_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-UP-*")
!define Composition_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-DOWN-*")
!define Composition_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-LEFT-*")
!define Composition_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-RIGHT-*")

!define Aggregation(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-o") 
!define Aggregation_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-UP-o")
!define Aggregation_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-DOWN-o")
!define Aggregation_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-LEFT-o")
!define Aggregation_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-RIGHT-o")

!define Assignment(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "o->") 
!define Assignment_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "o-UP->")
!define Assignment_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "o-DOWN->")
!define Assignment_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "o-LEFT->")
!define Assignment_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "o-RIGHT->")

!define Specilization(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-|>") 
!define Specilization_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-UP-|>")
!define Specilization_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-DOWN-|>")
!define Specilization_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-LEFT-|>")
!define Specilization_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-RIGHT-|>")

!define Serving(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "->") 
!define Serving_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-UP->")
!define Serving_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-DOWN->")
!define Serving_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-LEFT->")
!define Serving_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-RIGHT->")

!define Association(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-") 
!define Association_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-UP-")
!define Association_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-DOWN-")
!define Association_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-LEFT-")
!define Association_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-RIGHT-")

!define Flow(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".>>") 
!define Flow_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".UP.>>")
!define Flow_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".DOWN.>>")
!define Flow_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".LEFT.>>")
!define Flow_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".RIGHT.>>")

!define Realization(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".|>") 
!define Realization_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".UP.|>")
!define Realization_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".DOWN.|>")
!define Realization_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".LEFT.|>")
!define Realization_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".RIGHT.|>")

!define Triggering(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "->>") 
!define Triggering_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-UP->>")
!define Triggering_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-DOWN->>")
!define Triggering_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-LEFT->>")
!define Triggering_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-RIGHT->>")

!define Access(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".>") 
!define Access_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".UP.>")
!define Access_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".DOWN.>")
!define Access_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".LEFT.>")
!define Access_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, ".RIGHT.>")

!define Influnce(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "->") 
!define Influnce_Up(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-UP->")
!define Influnce_Down(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-DOWN->")
!define Influnce_Left(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-LEFT->")
!define Influnce_Right(e_From, e_To, e_label="") Rel_(e_From, e_To, e_label, "-RIGHT->")

'------------------------------------------------------------'
' Headless Arrows
'------------------------------------------------------------'

!define quick_assign(b, text=">", pointer="-") pointer b : text \n <$assignment>
!define quick_access(b, text=">", pointer="-") pointer b : text \n <$access>
!define quick_aggregate(b, text=">", pointer="-") pointer b : text \n <$aggregation>
!define quick_assocate(b, text=">", pointer="-") pointer b : text \n <$association>
!define quick_realize(b, text=">", pointer="-") pointer b : text \n <$realisation>
!define quick_usedby(b, text=">", pointer="-") pointer b : text \n <$usedby>
!define quick_flow(b, text=">", pointer="-") pointer b : text \n <$flow>
!define quick_trigger(b, text=">", pointer="-") pointer b : text \n <$trigger>
!define quick_compose(b, text=">", pointer="-") pointer b : text \n <$composition>
!define quick_influence(b, text=">", pointer="-") pointer b : text \n <$influence>

'------------------------------------------------------------'